import warnings
from typing import Optional, Tuple

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch import Tensor
from torch.nn.init import constant_, xavier_normal_, xavier_uniform_

from .arm import AttentionRefinementModule


class MultiheadAttention(nn.Module):
    bias_k: Optional[torch.Tensor]
    bias_v: Optional[torch.Tensor]

    def __init__(
        self,
        embed_dim,
        num_heads,
        dropout=0.0,
        bias=True,
        add_bias_kv=False,
        add_zero_attn=False,
        kdim=None,
        vdim=None,
    ):
        super(MultiheadAttention, self).__init__()
        self.embed_dim = embed_dim
        self.kdim = kdim if kdim is not None else embed_dim
        self.vdim = vdim if vdim is not None else embed_dim
        self._qkv_same_embed_dim = self.kdim == embed_dim and self.vdim == embed_dim

        self.num_heads = num_heads
        self.dropout = dropout
        self.head_dim = embed_dim // num_heads
        assert (
            self.head_dim * num_heads == self.embed_dim
        ), "embed_dim must be divisible by num_heads"

        if self._qkv_same_embed_dim is False:
            self.q_proj_weight = nn.Parameter(
                torch.Tensor(embed_dim, embed_dim))
            self.k_proj_weight = nn.Parameter(
                torch.Tensor(embed_dim, self.kdim))
            self.v_proj_weight = nn.Parameter(
                torch.Tensor(embed_dim, self.vdim))
            self.register_parameter("in_proj_weight", None)
        else:
            self.in_proj_weight = nn.Parameter(
                torch.empty(3 * embed_dim, embed_dim))
            self.register_parameter("q_proj_weight", None)
            self.register_parameter("k_proj_weight", None)
            self.register_parameter("v_proj_weight", None)

        if bias:
            self.in_proj_bias = nn.Parameter(torch.empty(3 * embed_dim))
        else:
            self.register_parameter("in_proj_bias", None)
        self.out_proj = nn.Linear(embed_dim, embed_dim)

        if add_bias_kv:
            self.bias_k = nn.Parameter(torch.empty(1, 1, embed_dim))
            self.bias_v = nn.Parameter(torch.empty(1, 1, embed_dim))
        else:
            self.bias_k = self.bias_v = None

        self.add_zero_attn = add_zero_attn

        self._reset_parameters()

    def _reset_parameters(self):
        if self._qkv_same_embed_dim:
            xavier_uniform_(self.in_proj_weight)
        else:
            xavier_uniform_(self.q_proj_weight)
            xavier_uniform_(self.k_proj_weight)
            xavier_uniform_(self.v_proj_weight)

        if self.in_proj_bias is not None:
            constant_(self.in_proj_bias, 0.0)
            constant_(self.out_proj.bias, 0.0)
        if self.bias_k is not None:
            xavier_normal_(self.bias_k)
        if self.bias_v is not None:
            xavier_normal_(self.bias_v)

    def __setstate__(self, state):
        # Support loading old MultiheadAttention checkpoints generated by v1.1.0
        if "_qkv_same_embed_dim" not in state:
            state["_qkv_same_embed_dim"] = True

        super(MultiheadAttention, self).__setstate__(state)

    def forward(
        self,
        query: Tensor,
        key: Tensor,
        value: Tensor,
        arm: Optional[AttentionRefinementModule] = None,
        key_padding_mask: Optional[Tensor] = None,
        need_weights: bool = True,
        attn_mask: Optional[Tensor] = None,
    ) -> Tuple[Tensor, Optional[Tensor]]:
        if not self._qkv_same_embed_dim:
            return multi_head_attention_forward(
                query,
                key,
                value,
                arm,
                self.embed_dim,
                self.num_heads,
                self.in_proj_weight,
                self.in_proj_bias,
                self.bias_k,
                self.bias_v,
                self.add_zero_attn,
                self.dropout,
                self.out_proj.weight,
                self.out_proj.bias,
                training=self.training,
                key_padding_mask=key_padding_mask,
                need_weights=need_weights,
                attn_mask=attn_mask,
                use_separate_proj_weight=True,
                q_proj_weight=self.q_proj_weight,
                k_proj_weight=self.k_proj_weight,
                v_proj_weight=self.v_proj_weight,
            )
        else:
            return multi_head_attention_forward(
                query,
                key,
                value,
                arm,
                self.embed_dim,
                self.num_heads,
                self.in_proj_weight,
                self.in_proj_bias,
                self.bias_k,
                self.bias_v,
                self.add_zero_attn,
                self.dropout,
                self.out_proj.weight,
                self.out_proj.bias,
                training=self.training,
                key_padding_mask=key_padding_mask,
                need_weights=need_weights,
                attn_mask=attn_mask,
            )


def mask_softmax_dropout(dots, attn_mask, key_padding_mask, bsz, num_heads, tgt_len, src_len, dropout_p, training):
    device = dots.device
    
    if attn_mask is not None:
        # Make sure attn_mask is on the same device as dots
        attn_mask = attn_mask.to(device)
        
        # Check if we need to reshape the attn_mask
        if attn_mask.dim() == 2:
            attn_mask = attn_mask.unsqueeze(0)
        
        # Reshape attn_mask if needed to match dots dimensions
        if attn_mask.shape[0] == 1 and bsz * num_heads > 1:
            # Broadcast the mask to all heads
            attn_mask = attn_mask.expand(bsz * num_heads, -1, -1)
        
        # Check if dimensions match
        if attn_mask.size(0) != bsz * num_heads or attn_mask.size(1) != tgt_len or attn_mask.size(2) != src_len:
            print(f"Warning: attn_mask shape {attn_mask.shape} doesn't match required shape ({bsz * num_heads}, {tgt_len}, {src_len})")
            
            # Try to reshape or create a new mask
            if attn_mask.dtype == torch.bool:
                new_mask = torch.zeros((bsz * num_heads, tgt_len, src_len), dtype=torch.bool, device=device)
            else:
                new_mask = torch.zeros((bsz * num_heads, tgt_len, src_len), dtype=attn_mask.dtype, device=device)
                
            # Copy as much as we can from the original mask
            copy_heads = min(attn_mask.size(0), bsz * num_heads)
            copy_tgt = min(attn_mask.size(1), tgt_len)
            copy_src = min(attn_mask.size(2), src_len)
            new_mask[:copy_heads, :copy_tgt, :copy_src] = attn_mask[:copy_heads, :copy_tgt, :copy_src]
            attn_mask = new_mask
        
        # Apply the mask
        if attn_mask.dtype == torch.bool:
            dots.masked_fill_(attn_mask, float("-inf"))
        else:
            dots += attn_mask

    if key_padding_mask is not None:
        # Make sure key_padding_mask is on the same device as dots
        key_padding_mask = key_padding_mask.to(device)
        
        # Reshape dots for masking
        dots_reshaped = dots.view(bsz, num_heads, tgt_len, src_len)
        
        # Ensure key_padding_mask has the right shape
        if key_padding_mask.shape[0] != bsz or key_padding_mask.shape[1] != src_len:
            # Create a new mask with the right shape
            new_mask = torch.zeros((bsz, src_len), dtype=torch.bool, device=device)
            # Copy as much as we can from the original mask
            copy_rows = min(key_padding_mask.shape[0], bsz)
            copy_cols = min(key_padding_mask.shape[1], src_len)
            new_mask[:copy_rows, :copy_cols] = key_padding_mask[:copy_rows, :copy_cols]
            key_padding_mask = new_mask
            
        # Apply the mask
        dots_reshaped.masked_fill_(
            key_padding_mask.unsqueeze(1).unsqueeze(2),
            float("-inf"),
        )
        dots = dots_reshaped.view(bsz * num_heads, tgt_len, src_len)

    attn = F.softmax(dots, dim=-1)
    attn = F.dropout(attn, p=dropout_p, training=training)
    return attn

def multi_head_attention_forward(
    query: Tensor,
    key: Tensor,
    value: Tensor,
    arm: Optional[AttentionRefinementModule],
    embed_dim_to_check: int,
    num_heads: int,
    in_proj_weight: Tensor,
    in_proj_bias: Tensor,
    bias_k: Optional[Tensor],
    bias_v: Optional[Tensor],
    add_zero_attn: bool,
    dropout_p: float,
    out_proj_weight: Tensor,
    out_proj_bias: Tensor,
    training: bool = True,
    key_padding_mask: Optional[Tensor] = None,
    need_weights: bool = True,
    attn_mask: Optional[Tensor] = None,
    use_separate_proj_weight: bool = False,
    q_proj_weight: Optional[Tensor] = None,
    k_proj_weight: Optional[Tensor] = None,
    v_proj_weight: Optional[Tensor] = None,
    static_k: Optional[Tensor] = None,
    static_v: Optional[Tensor] = None,
) -> Tuple[Tensor, Optional[Tensor]]:
    try:
        # Get dimensions and device
        tgt_len, bsz, embed_dim = query.size()
        device = query.device
        
        # Check dimensions
        assert embed_dim == embed_dim_to_check, f"Embed dim mismatch: {embed_dim} vs {embed_dim_to_check}"
        assert key.size(0) == value.size(0) and key.size(1) == value.size(1), "Key and value size mismatch"

        # Calculate head dimensions
        head_dim = embed_dim // num_heads
        assert head_dim * num_heads == embed_dim, "embed_dim must be divisible by num_heads"
        scaling = float(head_dim) ** -0.5

        # Compute q, k, v projections using the most direct approach
        if not use_separate_proj_weight:
            if (query is key or torch.equal(query, key)) and (key is value or torch.equal(key, value)):
                # Self-attention case
                q, k, v = F.linear(query, in_proj_weight, in_proj_bias).chunk(3, dim=-1)
            elif key is value or torch.equal(key, value):
                # Encoder-decoder attention case
                _b = in_proj_bias
                _start, _end = 0, embed_dim
                _w = in_proj_weight[_start:_end, :]
                if _b is not None:
                    _b = _b[_start:_end]
                q = F.linear(query, _w, _b)

                if key is None:
                    assert value is None
                    k = v = None
                else:
                    _b = in_proj_bias
                    _start, _end = embed_dim, None
                    _w = in_proj_weight[_start:, :]
                    if _b is not None:
                        _b = _b[_start:]
                    k, v = F.linear(key, _w, _b).chunk(2, dim=-1)
            else:
                # General case
                _b = in_proj_bias
                
                # Query projection
                _start, _end = 0, embed_dim
                _w = in_proj_weight[_start:_end, :]
                if _b is not None:
                    _b = _b[_start:_end]
                q = F.linear(query, _w, _b)
                
                # Key projection
                _start, _end = embed_dim, embed_dim * 2
                _w = in_proj_weight[_start:_end, :]
                if _b is not None:
                    _b = _b[_start:_end]
                k = F.linear(key, _w, _b)
                
                # Value projection
                _start, _end = embed_dim * 2, None
                _w = in_proj_weight[_start:, :]
                if _b is not None:
                    _b = _b[_start:]
                v = F.linear(value, _w, _b)
        else:
            # Use separate projection weights
            q_proj_weight_non_opt = torch.jit._unwrap_optional(q_proj_weight)
            len1, len2 = q_proj_weight_non_opt.size()
            assert len1 == embed_dim and len2 == query.size(-1)

            k_proj_weight_non_opt = torch.jit._unwrap_optional(k_proj_weight)
            len1, len2 = k_proj_weight_non_opt.size()
            assert len1 == embed_dim and len2 == key.size(-1)

            v_proj_weight_non_opt = torch.jit._unwrap_optional(v_proj_weight)
            len1, len2 = v_proj_weight_non_opt.size()
            assert len1 == embed_dim and len2 == value.size(-1)

            if in_proj_bias is not None:
                q = F.linear(query, q_proj_weight_non_opt, in_proj_bias[0:embed_dim])
                k = F.linear(key, k_proj_weight_non_opt, in_proj_bias[embed_dim:(embed_dim * 2)])
                v = F.linear(value, v_proj_weight_non_opt, in_proj_bias[(embed_dim * 2):])
            else:
                q = F.linear(query, q_proj_weight_non_opt, in_proj_bias)
                k = F.linear(key, k_proj_weight_non_opt, in_proj_bias)
                v = F.linear(value, v_proj_weight_non_opt, in_proj_bias)
        
        # Apply scaling to query
        q = q * scaling

        # Handle mask dtype conversions
        if attn_mask is not None:
            if attn_mask.dtype == torch.uint8:
                warnings.warn("Byte tensor for attn_mask is deprecated. Use bool tensor instead.")
                attn_mask = attn_mask.to(torch.bool)

        if key_padding_mask is not None and key_padding_mask.dtype == torch.uint8:
            warnings.warn("Byte tensor for key_padding_mask is deprecated. Use bool tensor instead.")
            key_padding_mask = key_padding_mask.to(torch.bool)

        # Move tensors to the same device
        q = q.to(device)
        if k is not None:
            k = k.to(device)
        if v is not None:
            v = v.to(device)

        # Get sequence lengths
        src_len = k.size(0)
        
        # Simplified approach: process all heads together
        try:
            # Reshape q, k, v for multi-head attention
            # [tgt_len, bsz, embed_dim] -> [tgt_len, bsz * num_heads, head_dim]
            q = q.contiguous().view(tgt_len, bsz * num_heads, head_dim)
            k = k.contiguous().view(src_len, bsz * num_heads, head_dim)
            v = v.contiguous().view(src_len, bsz * num_heads, head_dim)
            
            # Transpose for batch matrix multiplication
            # [tgt_len, bsz * num_heads, head_dim] -> [bsz * num_heads, tgt_len, head_dim]
            q = q.transpose(0, 1)
            # [src_len, bsz * num_heads, head_dim] -> [bsz * num_heads, src_len, head_dim]
            k = k.transpose(0, 1)
            v = v.transpose(0, 1)
            
            # Calculate attention scores
            # [bsz * num_heads, tgt_len, head_dim] @ [bsz * num_heads, head_dim, src_len]
            # -> [bsz * num_heads, tgt_len, src_len]
            attn_weights = torch.bmm(q, k.transpose(1, 2))
            
            # Apply masks
            if attn_mask is not None:
                if attn_mask.dim() == 2:
                    # [tgt_len, src_len] -> [1, tgt_len, src_len]
                    attn_mask = attn_mask.unsqueeze(0)
                    # Expand to all heads: [1, tgt_len, src_len] -> [bsz * num_heads, tgt_len, src_len]
                    attn_mask = attn_mask.expand(bsz * num_heads, -1, -1)
                elif attn_mask.dim() == 3:
                    # [num_heads, tgt_len, src_len] -> [bsz * num_heads, tgt_len, src_len]
                    attn_mask = attn_mask.repeat(bsz, 1, 1)
                
                attn_weights = attn_weights.masked_fill(attn_mask, float("-inf"))
            
            if key_padding_mask is not None:
                # [bsz, src_len] -> [bsz, 1, src_len]
                key_padding_mask = key_padding_mask.unsqueeze(1)
                # Expand to all heads: [bsz, 1, src_len] -> [bsz * num_heads, tgt_len, src_len]
                key_padding_mask = key_padding_mask.expand(-1, tgt_len, -1)
                key_padding_mask = key_padding_mask.reshape(bsz * num_heads, tgt_len, src_len)
                attn_weights = attn_weights.masked_fill(key_padding_mask, float("-inf"))
            
            # Apply softmax and dropout
            attn_weights = F.softmax(attn_weights, dim=-1)
            attn_weights = F.dropout(attn_weights, p=dropout_p, training=training)
            
            # Apply attention to values
            # [bsz * num_heads, tgt_len, src_len] @ [bsz * num_heads, src_len, head_dim]
            # -> [bsz * num_heads, tgt_len, head_dim]
            attn_output = torch.bmm(attn_weights, v)
            
            # Reshape back
            # [bsz * num_heads, tgt_len, head_dim] -> [tgt_len, bsz * num_heads, head_dim]
            attn_output = attn_output.transpose(0, 1).contiguous()
            # [tgt_len, bsz * num_heads, head_dim] -> [tgt_len, bsz, embed_dim]
            attn_output = attn_output.view(tgt_len, bsz, embed_dim)
            
            # Apply output projection
            attn_output = F.linear(attn_output, out_proj_weight, out_proj_bias)
            
            return attn_output, None
        
        except Exception as e:
            print(f"Error in attention mechanism: {e}")
            
            # Fallback: Use a simpler approach that avoids complex reshaping
            # Initialize output tensor
            attn_output = torch.zeros(tgt_len, bsz, embed_dim, device=device)
            
            # Process each head separately
            for h in range(num_heads):
                # Extract head-specific query, key, value
                head_start = h * head_dim
                head_end = (h + 1) * head_dim
                
                q_h = q[:, :, head_start:head_end]  # [tgt_len, bsz, head_dim]
                k_h = k[:, :, head_start:head_end]  # [src_len, bsz, head_dim]
                v_h = v[:, :, head_start:head_end]  # [src_len, bsz, head_dim]
                
                # Simple dot product for each position
                attn_output_h = torch.zeros_like(q_h)
                
                for i in range(tgt_len):
                    for j in range(src_len):
                        # Compute attention weight
                        weight = torch.sum(q_h[i] * k_h[j], dim=-1, keepdim=True)  # [bsz, 1]
                        # Apply to value
                        attn_output_h[i] += weight * v_h[j]
                
                # Add to output
                attn_output[:, :, head_start:head_end] = attn_output_h
            
            # Apply output projection
            attn_output = F.linear(attn_output, out_proj_weight, out_proj_bias)
            
            return attn_output, None
    
    except Exception as e:
        print(f"Critical error in attention: {e}")
        # Return zero tensors as fallback
        return torch.zeros(tgt_len, bsz, embed_dim, device=device), None
