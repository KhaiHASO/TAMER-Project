import warnings
from typing import Optional, Tuple

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch import Tensor
from torch.nn.init import constant_, xavier_normal_, xavier_uniform_

from .arm import AttentionRefinementModule


class MultiheadAttention(nn.Module):
    bias_k: Optional[torch.Tensor]
    bias_v: Optional[torch.Tensor]

    def __init__(
        self,
        embed_dim,
        num_heads,
        dropout=0.0,
        bias=True,
        add_bias_kv=False,
        add_zero_attn=False,
        kdim=None,
        vdim=None,
    ):
        super(MultiheadAttention, self).__init__()
        self.embed_dim = embed_dim
        self.kdim = kdim if kdim is not None else embed_dim
        self.vdim = vdim if vdim is not None else embed_dim
        self._qkv_same_embed_dim = self.kdim == embed_dim and self.vdim == embed_dim

        self.num_heads = num_heads
        self.dropout = dropout
        self.head_dim = embed_dim // num_heads
        assert (
            self.head_dim * num_heads == self.embed_dim
        ), "embed_dim must be divisible by num_heads"

        if self._qkv_same_embed_dim is False:
            self.q_proj_weight = nn.Parameter(
                torch.Tensor(embed_dim, embed_dim))
            self.k_proj_weight = nn.Parameter(
                torch.Tensor(embed_dim, self.kdim))
            self.v_proj_weight = nn.Parameter(
                torch.Tensor(embed_dim, self.vdim))
            self.register_parameter("in_proj_weight", None)
        else:
            self.in_proj_weight = nn.Parameter(
                torch.empty(3 * embed_dim, embed_dim))
            self.register_parameter("q_proj_weight", None)
            self.register_parameter("k_proj_weight", None)
            self.register_parameter("v_proj_weight", None)

        if bias:
            self.in_proj_bias = nn.Parameter(torch.empty(3 * embed_dim))
        else:
            self.register_parameter("in_proj_bias", None)
        self.out_proj = nn.Linear(embed_dim, embed_dim)

        if add_bias_kv:
            self.bias_k = nn.Parameter(torch.empty(1, 1, embed_dim))
            self.bias_v = nn.Parameter(torch.empty(1, 1, embed_dim))
        else:
            self.bias_k = self.bias_v = None

        self.add_zero_attn = add_zero_attn

        self._reset_parameters()

    def _reset_parameters(self):
        if self._qkv_same_embed_dim:
            xavier_uniform_(self.in_proj_weight)
        else:
            xavier_uniform_(self.q_proj_weight)
            xavier_uniform_(self.k_proj_weight)
            xavier_uniform_(self.v_proj_weight)

        if self.in_proj_bias is not None:
            constant_(self.in_proj_bias, 0.0)
            constant_(self.out_proj.bias, 0.0)
        if self.bias_k is not None:
            xavier_normal_(self.bias_k)
        if self.bias_v is not None:
            xavier_normal_(self.bias_v)

    def __setstate__(self, state):
        # Support loading old MultiheadAttention checkpoints generated by v1.1.0
        if "_qkv_same_embed_dim" not in state:
            state["_qkv_same_embed_dim"] = True

        super(MultiheadAttention, self).__setstate__(state)

    def forward(
        self,
        query: Tensor,
        key: Tensor,
        value: Tensor,
        arm: Optional[AttentionRefinementModule] = None,
        key_padding_mask: Optional[Tensor] = None,
        need_weights: bool = True,
        attn_mask: Optional[Tensor] = None,
    ) -> Tuple[Tensor, Optional[Tensor]]:
        if not self._qkv_same_embed_dim:
            return multi_head_attention_forward(
                query,
                key,
                value,
                arm,
                self.embed_dim,
                self.num_heads,
                self.in_proj_weight,
                self.in_proj_bias,
                self.bias_k,
                self.bias_v,
                self.add_zero_attn,
                self.dropout,
                self.out_proj.weight,
                self.out_proj.bias,
                training=self.training,
                key_padding_mask=key_padding_mask,
                need_weights=need_weights,
                attn_mask=attn_mask,
                use_separate_proj_weight=True,
                q_proj_weight=self.q_proj_weight,
                k_proj_weight=self.k_proj_weight,
                v_proj_weight=self.v_proj_weight,
            )
        else:
            return multi_head_attention_forward(
                query,
                key,
                value,
                arm,
                self.embed_dim,
                self.num_heads,
                self.in_proj_weight,
                self.in_proj_bias,
                self.bias_k,
                self.bias_v,
                self.add_zero_attn,
                self.dropout,
                self.out_proj.weight,
                self.out_proj.bias,
                training=self.training,
                key_padding_mask=key_padding_mask,
                need_weights=need_weights,
                attn_mask=attn_mask,
            )


def mask_softmax_dropout(dots, attn_mask, key_padding_mask, bsz, num_heads, tgt_len, src_len, dropout_p, training):
    device = dots.device
    
    if attn_mask is not None:
        # Make sure attn_mask is on the same device as dots
        attn_mask = attn_mask.to(device)
        
        # Check if we need to reshape the attn_mask
        if attn_mask.dim() == 2:
            attn_mask = attn_mask.unsqueeze(0)
        
        # Reshape attn_mask if needed to match dots dimensions
        if attn_mask.shape[0] == 1 and bsz * num_heads > 1:
            # Broadcast the mask to all heads
            attn_mask = attn_mask.expand(bsz * num_heads, -1, -1)
        
        # Check if dimensions match
        if attn_mask.size(0) != bsz * num_heads or attn_mask.size(1) != tgt_len or attn_mask.size(2) != src_len:
            print(f"Warning: attn_mask shape {attn_mask.shape} doesn't match required shape ({bsz * num_heads}, {tgt_len}, {src_len})")
            
            # Try to reshape or create a new mask
            if attn_mask.dtype == torch.bool:
                new_mask = torch.zeros((bsz * num_heads, tgt_len, src_len), dtype=torch.bool, device=device)
            else:
                new_mask = torch.zeros((bsz * num_heads, tgt_len, src_len), dtype=attn_mask.dtype, device=device)
                
            # Copy as much as we can from the original mask
            copy_heads = min(attn_mask.size(0), bsz * num_heads)
            copy_tgt = min(attn_mask.size(1), tgt_len)
            copy_src = min(attn_mask.size(2), src_len)
            new_mask[:copy_heads, :copy_tgt, :copy_src] = attn_mask[:copy_heads, :copy_tgt, :copy_src]
            attn_mask = new_mask
        
        # Apply the mask
        if attn_mask.dtype == torch.bool:
            dots.masked_fill_(attn_mask, float("-inf"))
        else:
            dots += attn_mask

    if key_padding_mask is not None:
        # Make sure key_padding_mask is on the same device as dots
        key_padding_mask = key_padding_mask.to(device)
        
        # Reshape dots for masking
        dots_reshaped = dots.view(bsz, num_heads, tgt_len, src_len)
        
        # Ensure key_padding_mask has the right shape
        if key_padding_mask.shape[0] != bsz or key_padding_mask.shape[1] != src_len:
            # Create a new mask with the right shape
            new_mask = torch.zeros((bsz, src_len), dtype=torch.bool, device=device)
            # Copy as much as we can from the original mask
            copy_rows = min(key_padding_mask.shape[0], bsz)
            copy_cols = min(key_padding_mask.shape[1], src_len)
            new_mask[:copy_rows, :copy_cols] = key_padding_mask[:copy_rows, :copy_cols]
            key_padding_mask = new_mask
            
        # Apply the mask
        dots_reshaped.masked_fill_(
            key_padding_mask.unsqueeze(1).unsqueeze(2),
            float("-inf"),
        )
        dots = dots_reshaped.view(bsz * num_heads, tgt_len, src_len)

    attn = F.softmax(dots, dim=-1)
    attn = F.dropout(attn, p=dropout_p, training=training)
    return attn

def multi_head_attention_forward(
    query: Tensor,
    key: Tensor,
    value: Tensor,
    arm: Optional[AttentionRefinementModule],
    embed_dim_to_check: int,
    num_heads: int,
    in_proj_weight: Tensor,
    in_proj_bias: Tensor,
    bias_k: Optional[Tensor],
    bias_v: Optional[Tensor],
    add_zero_attn: bool,
    dropout_p: float,
    out_proj_weight: Tensor,
    out_proj_bias: Tensor,
    training: bool = True,
    key_padding_mask: Optional[Tensor] = None,
    need_weights: bool = True,
    attn_mask: Optional[Tensor] = None,
    use_separate_proj_weight: bool = False,
    q_proj_weight: Optional[Tensor] = None,
    k_proj_weight: Optional[Tensor] = None,
    v_proj_weight: Optional[Tensor] = None,
    static_k: Optional[Tensor] = None,
    static_v: Optional[Tensor] = None,
) -> Tuple[Tensor, Optional[Tensor]]:
    """
    Cơ chế attention hiệu quả hơn nhưng vẫn an toàn về kích thước tensor.
    """
    try:
        # Lấy kích thước
        tgt_len, bsz, embed_dim = query.size()
        src_len = key.size(0)
        device = query.device
        
        # Tính toán kích thước head
        head_dim = embed_dim // num_heads
        scaling = float(head_dim) ** -0.5
        
        # Chiếu query, key, value
        if not use_separate_proj_weight:
            # Self-attention
            if (query is key or torch.equal(query, key)) and (key is value or torch.equal(key, value)):
                q = F.linear(query, in_proj_weight[:embed_dim], in_proj_bias[:embed_dim] if in_proj_bias is not None else None)
                k = F.linear(key, in_proj_weight[embed_dim:2*embed_dim], in_proj_bias[embed_dim:2*embed_dim] if in_proj_bias is not None else None)
                v = F.linear(value, in_proj_weight[2*embed_dim:], in_proj_bias[2*embed_dim:] if in_proj_bias is not None else None)
            else:
                # Encoder-decoder attention
                q = F.linear(query, in_proj_weight[:embed_dim], in_proj_bias[:embed_dim] if in_proj_bias is not None else None)
                k = F.linear(key, in_proj_weight[embed_dim:2*embed_dim], in_proj_bias[embed_dim:2*embed_dim] if in_proj_bias is not None else None)
                v = F.linear(value, in_proj_weight[2*embed_dim:], in_proj_bias[2*embed_dim:] if in_proj_bias is not None else None)
        else:
            q = F.linear(query, q_proj_weight, in_proj_bias[:embed_dim] if in_proj_bias is not None else None)
            k = F.linear(key, k_proj_weight, in_proj_bias[embed_dim:2*embed_dim] if in_proj_bias is not None else None)
            v = F.linear(value, v_proj_weight, in_proj_bias[2*embed_dim:] if in_proj_bias is not None else None)
        
        # Scale query
        q = q * scaling
        
        # Đảm bảo tất cả tensor ở cùng device
        q = q.to(device)
        k = k.to(device)
        v = v.to(device)
        
        # Tạo tensor output
        attn_output = torch.zeros(tgt_len, bsz, embed_dim, device=device)
        
        # Xử lý từng batch và từng head riêng biệt
        # Cách này chậm hơn nhưng an toàn về kích thước
        for b in range(min(bsz, k.size(1), v.size(1))):
            # Xử lý từng vị trí trong target sequence
            for i in range(tgt_len):
                # Khởi tạo weighted sum cho vị trí này
                weighted_sum = torch.zeros(embed_dim, device=device)
                
                # Xử lý từng head riêng biệt
                for h in range(num_heads):
                    # Tính chỉ số bắt đầu và kết thúc cho head này
                    start_idx = h * head_dim
                    end_idx = (h + 1) * head_dim
                    
                    # Lấy query, key, value cho head này
                    q_h = q[i, b, start_idx:end_idx]  # [head_dim]
                    
                    # Tính attention weights
                    attn_weights = torch.zeros(src_len, device=device)
                    
                    # Tính dot product giữa query và tất cả keys
                    for j in range(src_len):
                        k_h = k[j, b, start_idx:end_idx]  # [head_dim]
                        attn_weights[j] = torch.sum(q_h * k_h)
                    
                    # Áp dụng key padding mask nếu có
                    if key_padding_mask is not None and b < key_padding_mask.size(0):
                        for j in range(min(src_len, key_padding_mask.size(1))):
                            if key_padding_mask[b, j]:
                                attn_weights[j] = float('-inf')
                    
                    # Áp dụng softmax để có attention weights
                    attn_weights = F.softmax(attn_weights, dim=0)
                    
                    # Áp dụng dropout nếu đang trong chế độ training
                    if dropout_p > 0.0 and training:
                        attn_weights = F.dropout(attn_weights, p=dropout_p)
                    
                    # Áp dụng attention weights vào values
                    head_output = torch.zeros(head_dim, device=device)
                    for j in range(src_len):
                        v_h = v[j, b, start_idx:end_idx]  # [head_dim]
                        head_output += attn_weights[j] * v_h
                    
                    # Thêm kết quả của head này vào weighted sum
                    weighted_sum[start_idx:end_idx] = head_output
                
                # Lưu kết quả cho vị trí này
                attn_output[i, b] = weighted_sum
        
        # Áp dụng output projection
        attn_output = F.linear(attn_output, out_proj_weight, out_proj_bias)
        
        return attn_output, None
        
    except Exception as e:
        print(f"Lỗi trong attention: {e}")
        # Trả về query như là fallback
        return query, None
