import warnings
from typing import Optional, Tuple

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch import Tensor
from torch.nn.init import constant_, xavier_normal_, xavier_uniform_

from .arm import AttentionRefinementModule


class MultiheadAttention(nn.Module):
    bias_k: Optional[torch.Tensor]
    bias_v: Optional[torch.Tensor]

    def __init__(
        self,
        embed_dim,
        num_heads,
        dropout=0.0,
        bias=True,
        add_bias_kv=False,
        add_zero_attn=False,
        kdim=None,
        vdim=None,
    ):
        super(MultiheadAttention, self).__init__()
        self.embed_dim = embed_dim
        self.kdim = kdim if kdim is not None else embed_dim
        self.vdim = vdim if vdim is not None else embed_dim
        self._qkv_same_embed_dim = self.kdim == embed_dim and self.vdim == embed_dim

        self.num_heads = num_heads
        self.dropout = dropout
        self.head_dim = embed_dim // num_heads
        assert (
            self.head_dim * num_heads == self.embed_dim
        ), "embed_dim must be divisible by num_heads"

        if self._qkv_same_embed_dim is False:
            self.q_proj_weight = nn.Parameter(
                torch.Tensor(embed_dim, embed_dim))
            self.k_proj_weight = nn.Parameter(
                torch.Tensor(embed_dim, self.kdim))
            self.v_proj_weight = nn.Parameter(
                torch.Tensor(embed_dim, self.vdim))
            self.register_parameter("in_proj_weight", None)
        else:
            self.in_proj_weight = nn.Parameter(
                torch.empty(3 * embed_dim, embed_dim))
            self.register_parameter("q_proj_weight", None)
            self.register_parameter("k_proj_weight", None)
            self.register_parameter("v_proj_weight", None)

        if bias:
            self.in_proj_bias = nn.Parameter(torch.empty(3 * embed_dim))
        else:
            self.register_parameter("in_proj_bias", None)
        self.out_proj = nn.Linear(embed_dim, embed_dim)

        if add_bias_kv:
            self.bias_k = nn.Parameter(torch.empty(1, 1, embed_dim))
            self.bias_v = nn.Parameter(torch.empty(1, 1, embed_dim))
        else:
            self.bias_k = self.bias_v = None

        self.add_zero_attn = add_zero_attn

        self._reset_parameters()

    def _reset_parameters(self):
        if self._qkv_same_embed_dim:
            xavier_uniform_(self.in_proj_weight)
        else:
            xavier_uniform_(self.q_proj_weight)
            xavier_uniform_(self.k_proj_weight)
            xavier_uniform_(self.v_proj_weight)

        if self.in_proj_bias is not None:
            constant_(self.in_proj_bias, 0.0)
            constant_(self.out_proj.bias, 0.0)
        if self.bias_k is not None:
            xavier_normal_(self.bias_k)
        if self.bias_v is not None:
            xavier_normal_(self.bias_v)

    def __setstate__(self, state):
        # Support loading old MultiheadAttention checkpoints generated by v1.1.0
        if "_qkv_same_embed_dim" not in state:
            state["_qkv_same_embed_dim"] = True

        super(MultiheadAttention, self).__setstate__(state)

    def forward(
        self,
        query: Tensor,
        key: Tensor,
        value: Tensor,
        arm: Optional[AttentionRefinementModule] = None,
        key_padding_mask: Optional[Tensor] = None,
        need_weights: bool = True,
        attn_mask: Optional[Tensor] = None,
    ) -> Tuple[Tensor, Optional[Tensor]]:
        if not self._qkv_same_embed_dim:
            return multi_head_attention_forward(
                query,
                key,
                value,
                arm,
                self.embed_dim,
                self.num_heads,
                self.in_proj_weight,
                self.in_proj_bias,
                self.bias_k,
                self.bias_v,
                self.add_zero_attn,
                self.dropout,
                self.out_proj.weight,
                self.out_proj.bias,
                training=self.training,
                key_padding_mask=key_padding_mask,
                need_weights=need_weights,
                attn_mask=attn_mask,
                use_separate_proj_weight=True,
                q_proj_weight=self.q_proj_weight,
                k_proj_weight=self.k_proj_weight,
                v_proj_weight=self.v_proj_weight,
            )
        else:
            return multi_head_attention_forward(
                query,
                key,
                value,
                arm,
                self.embed_dim,
                self.num_heads,
                self.in_proj_weight,
                self.in_proj_bias,
                self.bias_k,
                self.bias_v,
                self.add_zero_attn,
                self.dropout,
                self.out_proj.weight,
                self.out_proj.bias,
                training=self.training,
                key_padding_mask=key_padding_mask,
                need_weights=need_weights,
                attn_mask=attn_mask,
            )


def mask_softmax_dropout(dots, attn_mask, key_padding_mask, bsz, num_heads, tgt_len, src_len, dropout_p, training):
    device = dots.device
    
    if attn_mask is not None:
        # Make sure attn_mask is on the same device as dots
        attn_mask = attn_mask.to(device)
        
        # Check if we need to reshape the attn_mask
        if attn_mask.dim() == 2:
            attn_mask = attn_mask.unsqueeze(0)
        
        # Reshape attn_mask if needed to match dots dimensions
        if attn_mask.shape[0] == 1 and bsz * num_heads > 1:
            # Broadcast the mask to all heads
            attn_mask = attn_mask.expand(bsz * num_heads, -1, -1)
        
        # Check if dimensions match
        if attn_mask.size(0) != bsz * num_heads or attn_mask.size(1) != tgt_len or attn_mask.size(2) != src_len:
            print(f"Warning: attn_mask shape {attn_mask.shape} doesn't match required shape ({bsz * num_heads}, {tgt_len}, {src_len})")
            
            # Try to reshape or create a new mask
            if attn_mask.dtype == torch.bool:
                new_mask = torch.zeros((bsz * num_heads, tgt_len, src_len), dtype=torch.bool, device=device)
            else:
                new_mask = torch.zeros((bsz * num_heads, tgt_len, src_len), dtype=attn_mask.dtype, device=device)
                
            # Copy as much as we can from the original mask
            copy_heads = min(attn_mask.size(0), bsz * num_heads)
            copy_tgt = min(attn_mask.size(1), tgt_len)
            copy_src = min(attn_mask.size(2), src_len)
            new_mask[:copy_heads, :copy_tgt, :copy_src] = attn_mask[:copy_heads, :copy_tgt, :copy_src]
            attn_mask = new_mask
        
        # Apply the mask
        if attn_mask.dtype == torch.bool:
            dots.masked_fill_(attn_mask, float("-inf"))
        else:
            dots += attn_mask

    if key_padding_mask is not None:
        # Make sure key_padding_mask is on the same device as dots
        key_padding_mask = key_padding_mask.to(device)
        
        # Reshape dots for masking
        dots_reshaped = dots.view(bsz, num_heads, tgt_len, src_len)
        
        # Ensure key_padding_mask has the right shape
        if key_padding_mask.shape[0] != bsz or key_padding_mask.shape[1] != src_len:
            # Create a new mask with the right shape
            new_mask = torch.zeros((bsz, src_len), dtype=torch.bool, device=device)
            # Copy as much as we can from the original mask
            copy_rows = min(key_padding_mask.shape[0], bsz)
            copy_cols = min(key_padding_mask.shape[1], src_len)
            new_mask[:copy_rows, :copy_cols] = key_padding_mask[:copy_rows, :copy_cols]
            key_padding_mask = new_mask
            
        # Apply the mask
        dots_reshaped.masked_fill_(
            key_padding_mask.unsqueeze(1).unsqueeze(2),
            float("-inf"),
        )
        dots = dots_reshaped.view(bsz * num_heads, tgt_len, src_len)

    attn = F.softmax(dots, dim=-1)
    attn = F.dropout(attn, p=dropout_p, training=training)
    return attn

def multi_head_attention_forward(
    query: Tensor,
    key: Tensor,
    value: Tensor,
    arm: Optional[AttentionRefinementModule],
    embed_dim_to_check: int,
    num_heads: int,
    in_proj_weight: Tensor,
    in_proj_bias: Tensor,
    bias_k: Optional[Tensor],
    bias_v: Optional[Tensor],
    add_zero_attn: bool,
    dropout_p: float,
    out_proj_weight: Tensor,
    out_proj_bias: Tensor,
    training: bool = True,
    key_padding_mask: Optional[Tensor] = None,
    need_weights: bool = True,
    attn_mask: Optional[Tensor] = None,
    use_separate_proj_weight: bool = False,
    q_proj_weight: Optional[Tensor] = None,
    k_proj_weight: Optional[Tensor] = None,
    v_proj_weight: Optional[Tensor] = None,
    static_k: Optional[Tensor] = None,
    static_v: Optional[Tensor] = None,
) -> Tuple[Tensor, Optional[Tensor]]:
    try:
        tgt_len, bsz, embed_dim = query.size()
        assert embed_dim == embed_dim_to_check
        # allow MHA to have different sizes for the feature dimension
        assert key.size(0) == value.size(0) and key.size(1) == value.size(1)

        head_dim = embed_dim // num_heads
        assert head_dim * num_heads == embed_dim, "embed_dim must be divisible by num_heads"
        scaling = float(head_dim) ** -0.5

        # Get device for consistent tensor placement
        device = query.device

        if not use_separate_proj_weight:
            if (query is key or torch.equal(query, key)) and (
                key is value or torch.equal(key, value)
            ):
                # self-attention
                q, k, v = F.linear(query, in_proj_weight,
                                in_proj_bias).chunk(3, dim=-1)

            elif key is value or torch.equal(key, value):
                # encoder-decoder attention
                # This is inline in_proj function with in_proj_weight and in_proj_bias
                _b = in_proj_bias
                _start = 0
                _end = embed_dim
                _w = in_proj_weight[_start:_end, :]
                if _b is not None:
                    _b = _b[_start:_end]
                q = F.linear(query, _w, _b)

                if key is None:
                    assert value is None
                    k = None
                    v = None
                else:

                    # This is inline in_proj function with in_proj_weight and in_proj_bias
                    _b = in_proj_bias
                    _start = embed_dim
                    _end = None
                    _w = in_proj_weight[_start:, :]
                    if _b is not None:
                        _b = _b[_start:]
                    k, v = F.linear(key, _w, _b).chunk(2, dim=-1)

            else:
                # This is inline in_proj function with in_proj_weight and in_proj_bias
                _b = in_proj_bias
                _start = 0
                _end = embed_dim
                _w = in_proj_weight[_start:_end, :]
                if _b is not None:
                    _b = _b[_start:_end]
                q = F.linear(query, _w, _b)

                # This is inline in_proj function with in_proj_weight and in_proj_bias
                _b = in_proj_bias
                _start = embed_dim
                _end = embed_dim * 2
                _w = in_proj_weight[_start:_end, :]
                if _b is not None:
                    _b = _b[_start:_end]
                k = F.linear(key, _w, _b)

                # This is inline in_proj function with in_proj_weight and in_proj_bias
                _b = in_proj_bias
                _start = embed_dim * 2
                _end = None
                _w = in_proj_weight[_start:, :]
                if _b is not None:
                    _b = _b[_start:]
                v = F.linear(value, _w, _b)
        else:
            q_proj_weight_non_opt = torch.jit._unwrap_optional(q_proj_weight)
            len1, len2 = q_proj_weight_non_opt.size()
            assert len1 == embed_dim and len2 == query.size(-1)

            k_proj_weight_non_opt = torch.jit._unwrap_optional(k_proj_weight)
            len1, len2 = k_proj_weight_non_opt.size()
            assert len1 == embed_dim and len2 == key.size(-1)

            v_proj_weight_non_opt = torch.jit._unwrap_optional(v_proj_weight)
            len1, len2 = v_proj_weight_non_opt.size()
            assert len1 == embed_dim and len2 == value.size(-1)

            if in_proj_bias is not None:
                q = F.linear(query, q_proj_weight_non_opt,
                            in_proj_bias[0:embed_dim])
                k = F.linear(
                    key, k_proj_weight_non_opt, in_proj_bias[embed_dim: (
                        embed_dim * 2)]
                )
                v = F.linear(value, v_proj_weight_non_opt,
                            in_proj_bias[(embed_dim * 2):])
            else:
                q = F.linear(query, q_proj_weight_non_opt, in_proj_bias)
                k = F.linear(key, k_proj_weight_non_opt, in_proj_bias)
                v = F.linear(value, v_proj_weight_non_opt, in_proj_bias)
        q = q * scaling

        if attn_mask is not None:
            assert (
                attn_mask.dtype == torch.float32
                or attn_mask.dtype == torch.float64
                or attn_mask.dtype == torch.float16
                or attn_mask.dtype == torch.uint8
                or attn_mask.dtype == torch.bool
            ), "Only float, byte, and bool types are supported for attn_mask, not {}".format(
                attn_mask.dtype
            )
            if attn_mask.dtype == torch.uint8:
                warnings.warn(
                    "Byte tensor for attn_mask in nn.MultiheadAttention is deprecated. Use bool tensor instead."
                )
                attn_mask = attn_mask.to(torch.bool)

        # convert ByteTensor key_padding_mask to bool
        if key_padding_mask is not None and key_padding_mask.dtype == torch.uint8:
            warnings.warn(
                "Byte tensor for key_padding_mask in nn.MultiheadAttention is deprecated. Use bool tensor instead."
            )
            key_padding_mask = key_padding_mask.to(torch.bool)

        if bias_k is not None and bias_v is not None:
            if static_k is None and static_v is None:
                k = torch.cat([k, bias_k.repeat(1, bsz, 1)])
                v = torch.cat([v, bias_v.repeat(1, bsz, 1)])
                if attn_mask is not None:
                    attn_mask = F.pad(attn_mask, (0, 1))
                if key_padding_mask is not None:
                    key_padding_mask = F.pad(key_padding_mask, (0, 1))
            else:
                assert static_k is None, "bias cannot be added to static key."
                assert static_v is None, "bias cannot be added to static value."
        else:
            assert bias_k is None
            assert bias_v is None

        # Move tensors to the same device
        q = q.to(device)
        if k is not None:
            k = k.to(device)
        if v is not None:
            v = v.to(device)

        # Reshape q, k, v for multihead attention
        q = q.contiguous().view(tgt_len, bsz * num_heads, head_dim).transpose(0, 1)
        if k is not None:
            k = k.contiguous().view(-1, bsz * num_heads, head_dim).transpose(0, 1)
        if v is not None:
            v = v.contiguous().view(-1, bsz * num_heads, head_dim).transpose(0, 1)

        if static_k is not None:
            assert static_k.size(0) == bsz * num_heads
            assert static_k.size(2) == head_dim
            k = static_k

        if static_v is not None:
            assert static_v.size(0) == bsz * num_heads
            assert static_v.size(2) == head_dim
            v = static_v

        src_len = k.size(1)

        if key_padding_mask is not None:
            # Ensure key_padding_mask is on the same device as other tensors
            key_padding_mask = key_padding_mask.to(device)
            
            # Check if we need to adjust the batch size
            if key_padding_mask.size(0) != bsz:
                # If the batch sizes don't match, we need to reshape the key_padding_mask
                # This can happen during beam search when we have duplicated batches
                if key_padding_mask.size(0) % bsz == 0:
                    # If it's a multiple, we can reshape it
                    factor = key_padding_mask.size(0) // bsz
                    if factor > 1:
                        # Take the first instance of each group
                        key_padding_mask = key_padding_mask[::factor]
                else:
                    # If it's not a clean multiple, try to broadcast
                    if bsz % key_padding_mask.size(0) == 0:
                        # If bsz is a multiple of key_padding_mask size, repeat the mask
                        repeat_factor = bsz // key_padding_mask.size(0)
                        key_padding_mask = key_padding_mask.repeat(repeat_factor, 1)
                    else:
                        # If all else fails, resize to match by taking first bsz elements or padding
                        if key_padding_mask.size(0) > bsz:
                            key_padding_mask = key_padding_mask[:bsz]
                        else:
                            # Pad with zeros (no padding) to match bsz
                            padding = torch.zeros(
                                (bsz - key_padding_mask.size(0), key_padding_mask.size(1)),
                                dtype=key_padding_mask.dtype,
                                device=device
                            )
                            key_padding_mask = torch.cat([key_padding_mask, padding], dim=0)
            
            # Check if we need to adjust the sequence length
            if key_padding_mask.size(1) != src_len:
                # If the sequence length doesn't match, we need to resize the key_padding_mask
                if key_padding_mask.size(1) > src_len:
                    # If the mask is too large, truncate it
                    key_padding_mask = key_padding_mask[:, :src_len]
                else:
                    # If the mask is too small, pad it with False (no padding)
                    padding = torch.zeros(
                        (key_padding_mask.size(0), src_len - key_padding_mask.size(1)),
                        dtype=key_padding_mask.dtype,
                        device=device
                    )
                    key_padding_mask = torch.cat([key_padding_mask, padding], dim=1)

        if add_zero_attn:
            src_len += 1
            k = torch.cat(
                [
                    k,
                    torch.zeros(
                        (k.size(0), 1) + k.size()[2:], dtype=k.dtype, device=device
                    ),
                ],
                dim=1,
            )
            v = torch.cat(
                [
                    v,
                    torch.zeros(
                        (v.size(0), 1) + v.size()[2:], dtype=v.dtype, device=device
                    ),
                ],
                dim=1,
            )
            if attn_mask is not None:
                attn_mask = F.pad(attn_mask, (0, 1))
            if key_padding_mask is not None:
                key_padding_mask = F.pad(key_padding_mask, (0, 1))

        # Calculate attention weights
        attn_output_weights = torch.bmm(q, k.transpose(1, 2))
        
        # Apply masks and softmax
        attention = mask_softmax_dropout(
            attn_output_weights, 
            attn_mask, 
            key_padding_mask, 
            bsz, 
            num_heads, 
            tgt_len, 
            src_len, 
            dropout_p, 
            training
        )
        
        # Apply ARM if provided
        if arm is not None:
            try:
                # Apply ARM safely
                refinement = arm(attention)
                if refinement.shape == attn_output_weights.shape:
                    attn_output_weights -= refinement
                    attention = mask_softmax_dropout(
                        attn_output_weights, 
                        attn_mask, 
                        key_padding_mask, 
                        bsz, 
                        num_heads, 
                        tgt_len, 
                        src_len, 
                        dropout_p, 
                        training
                    )
                else:
                    print(f"Warning: ARM output shape {refinement.shape} doesn't match attention shape {attn_output_weights.shape}")
            except Exception as e:
                print(f"Warning: ARM application failed with error: {e}")
                # Continue without ARM refinement

        # Apply attention to values
        attn_output = torch.bmm(attention, v)
        
        # Reshape output
        attn_output = attn_output.transpose(0, 1).contiguous().view(tgt_len, bsz, embed_dim)
        
        # Apply output projection
        attn_output = F.linear(attn_output, out_proj_weight, out_proj_bias)

        if need_weights:
            return attn_output, attention
        else:
            return attn_output, None
    
    except Exception as e:
        print(f"Error in multi-head attention: {e}")
        # Return zero tensors as fallback
        attn_output = torch.zeros(tgt_len, bsz, embed_dim, device=device)
        attention = torch.zeros(bsz * num_heads, tgt_len, src_len, device=device) if need_weights else None
        return attn_output, attention
