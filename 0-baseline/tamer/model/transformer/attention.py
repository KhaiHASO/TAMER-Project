import warnings
from typing import Optional, Tuple

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch import Tensor
from torch.nn.init import constant_, xavier_normal_, xavier_uniform_
from einops import rearrange, repeat

from .arm import AttentionRefinementModule


class MultiheadAttention(nn.Module):
    bias_k: Optional[torch.Tensor]
    bias_v: Optional[torch.Tensor]

    def __init__(
        self,
        embed_dim,
        num_heads,
        dropout=0.0,
        bias=True,
        add_bias_kv=False,
        add_zero_attn=False,
        kdim=None,
        vdim=None,
    ):
        super(MultiheadAttention, self).__init__()
        self.embed_dim = embed_dim
        self.kdim = kdim if kdim is not None else embed_dim
        self.vdim = vdim if vdim is not None else embed_dim
        self._qkv_same_embed_dim = self.kdim == embed_dim and self.vdim == embed_dim

        self.num_heads = num_heads
        self.dropout = dropout
        self.head_dim = embed_dim // num_heads
        assert (
            self.head_dim * num_heads == self.embed_dim
        ), "embed_dim must be divisible by num_heads"

        if self._qkv_same_embed_dim is False:
            self.q_proj_weight = nn.Parameter(
                torch.Tensor(embed_dim, embed_dim))
            self.k_proj_weight = nn.Parameter(
                torch.Tensor(embed_dim, self.kdim))
            self.v_proj_weight = nn.Parameter(
                torch.Tensor(embed_dim, self.vdim))
            self.register_parameter("in_proj_weight", None)
        else:
            self.in_proj_weight = nn.Parameter(
                torch.empty(3 * embed_dim, embed_dim))
            self.register_parameter("q_proj_weight", None)
            self.register_parameter("k_proj_weight", None)
            self.register_parameter("v_proj_weight", None)

        if bias:
            self.in_proj_bias = nn.Parameter(torch.empty(3 * embed_dim))
        else:
            self.register_parameter("in_proj_bias", None)
        self.out_proj = nn.Linear(embed_dim, embed_dim)

        if add_bias_kv:
            self.bias_k = nn.Parameter(torch.empty(1, 1, embed_dim))
            self.bias_v = nn.Parameter(torch.empty(1, 1, embed_dim))
        else:
            self.bias_k = self.bias_v = None

        self.add_zero_attn = add_zero_attn

        self._reset_parameters()

    def _reset_parameters(self):
        if self._qkv_same_embed_dim:
            xavier_uniform_(self.in_proj_weight)
        else:
            xavier_uniform_(self.q_proj_weight)
            xavier_uniform_(self.k_proj_weight)
            xavier_uniform_(self.v_proj_weight)

        if self.in_proj_bias is not None:
            constant_(self.in_proj_bias, 0.0)
            constant_(self.out_proj.bias, 0.0)
        if self.bias_k is not None:
            xavier_normal_(self.bias_k)
        if self.bias_v is not None:
            xavier_normal_(self.bias_v)

    def __setstate__(self, state):
        # Support loading old MultiheadAttention checkpoints generated by v1.1.0
        if "_qkv_same_embed_dim" not in state:
            state["_qkv_same_embed_dim"] = True

        super(MultiheadAttention, self).__setstate__(state)

    def forward(
        self,
        query: Tensor,
        key: Tensor,
        value: Tensor,
        arm: Optional[AttentionRefinementModule] = None,
        key_padding_mask: Optional[Tensor] = None,
        need_weights: bool = True,
        attn_mask: Optional[Tensor] = None,
    ) -> Tuple[Tensor, Optional[Tensor]]:
        if not self._qkv_same_embed_dim:
            return multi_head_attention_forward(
                query,
                key,
                value,
                arm,
                self.embed_dim,
                self.num_heads,
                self.in_proj_weight,
                self.in_proj_bias,
                self.bias_k,
                self.bias_v,
                self.add_zero_attn,
                self.dropout,
                self.out_proj.weight,
                self.out_proj.bias,
                training=self.training,
                key_padding_mask=key_padding_mask,
                need_weights=need_weights,
                attn_mask=attn_mask,
                use_separate_proj_weight=True,
                q_proj_weight=self.q_proj_weight,
                k_proj_weight=self.k_proj_weight,
                v_proj_weight=self.v_proj_weight,
            )
        else:
            return multi_head_attention_forward(
                query,
                key,
                value,
                arm,
                self.embed_dim,
                self.num_heads,
                self.in_proj_weight,
                self.in_proj_bias,
                self.bias_k,
                self.bias_v,
                self.add_zero_attn,
                self.dropout,
                self.out_proj.weight,
                self.out_proj.bias,
                training=self.training,
                key_padding_mask=key_padding_mask,
                need_weights=need_weights,
                attn_mask=attn_mask,
            )


def mask_softmax_dropout(dots, attn_mask, key_padding_mask, bsz, num_heads, tgt_len, src_len, dropout_p, training):
    device = dots.device
    
    if attn_mask is not None:
        # Make sure attn_mask is on the same device as dots
        attn_mask = attn_mask.to(device)
        
        # Check if we need to reshape the attn_mask
        if attn_mask.dim() == 2:
            attn_mask = attn_mask.unsqueeze(0)
        
        # Reshape attn_mask if needed to match dots dimensions
        if attn_mask.shape[0] == 1 and bsz * num_heads > 1:
            # Broadcast the mask to all heads
            attn_mask = attn_mask.expand(bsz * num_heads, -1, -1)
        
        # Check if dimensions match
        if attn_mask.size(0) != bsz * num_heads or attn_mask.size(1) != tgt_len or attn_mask.size(2) != src_len:
            print(f"Warning: attn_mask shape {attn_mask.shape} doesn't match required shape ({bsz * num_heads}, {tgt_len}, {src_len})")
            
            # Try to reshape or create a new mask
            if attn_mask.dtype == torch.bool:
                new_mask = torch.zeros((bsz * num_heads, tgt_len, src_len), dtype=torch.bool, device=device)
            else:
                new_mask = torch.zeros((bsz * num_heads, tgt_len, src_len), dtype=attn_mask.dtype, device=device)
                
            # Copy as much as we can from the original mask
            copy_heads = min(attn_mask.size(0), bsz * num_heads)
            copy_tgt = min(attn_mask.size(1), tgt_len)
            copy_src = min(attn_mask.size(2), src_len)
            new_mask[:copy_heads, :copy_tgt, :copy_src] = attn_mask[:copy_heads, :copy_tgt, :copy_src]
            attn_mask = new_mask
        
        # Apply the mask
        if attn_mask.dtype == torch.bool:
            dots.masked_fill_(attn_mask, float("-inf"))
        else:
            dots += attn_mask

    if key_padding_mask is not None:
        # Make sure key_padding_mask is on the same device as dots
        key_padding_mask = key_padding_mask.to(device)
        
        # Reshape dots for masking
        dots_reshaped = dots.view(bsz, num_heads, tgt_len, src_len)
        
        # Ensure key_padding_mask has the right shape
        if key_padding_mask.shape[0] != bsz or key_padding_mask.shape[1] != src_len:
            # Create a new mask with the right shape
            new_mask = torch.zeros((bsz, src_len), dtype=torch.bool, device=device)
            # Copy as much as we can from the original mask
            copy_rows = min(key_padding_mask.shape[0], bsz)
            copy_cols = min(key_padding_mask.shape[1], src_len)
            new_mask[:copy_rows, :copy_cols] = key_padding_mask[:copy_rows, :copy_cols]
            key_padding_mask = new_mask
            
        # Apply the mask
        dots_reshaped.masked_fill_(
            key_padding_mask.unsqueeze(1).unsqueeze(2),
            float("-inf"),
        )
        dots = dots_reshaped.view(bsz * num_heads, tgt_len, src_len)

    attn = F.softmax(dots, dim=-1)
    attn = F.dropout(attn, p=dropout_p, training=training)
    return attn

def multi_head_attention_forward(
    query: Tensor,
    key: Tensor,
    value: Tensor,
    arm: Optional[AttentionRefinementModule],
    embed_dim_to_check: int,
    num_heads: int,
    in_proj_weight: Tensor,
    in_proj_bias: Optional[Tensor],
    bias_k: Optional[Tensor],
    bias_v: Optional[Tensor],
    add_zero_attn: bool,
    dropout_p: float,
    out_proj_weight: Tensor,
    out_proj_bias: Optional[Tensor],
    training: bool = True,
    key_padding_mask: Optional[Tensor] = None,
    need_weights: bool = True,
    attn_mask: Optional[Tensor] = None,
    use_separate_proj_weight: bool = False,
    q_proj_weight: Optional[Tensor] = None,
    k_proj_weight: Optional[Tensor] = None,
    v_proj_weight: Optional[Tensor] = None,
    static_k: Optional[Tensor] = None,
    static_v: Optional[Tensor] = None,
) -> Tuple[Tensor, Optional[Tensor]]:
    tgt_len, bsz, embed_dim = query.size()
    assert embed_dim == embed_dim_to_check
    # allow MHA to have different sizes for the feature dimension
    assert key.size(0) == value.size(0) and key.size(1) == value.size(1)

    # Get the device of the query to ensure consistent device usage
    device = query.device
    
    # Ensure inputs are on the same device
    key = key.to(device)
    value = value.to(device)
    if in_proj_weight is not None:
        in_proj_weight = in_proj_weight.to(device)
    if in_proj_bias is not None:
        in_proj_bias = in_proj_bias.to(device)
    if out_proj_weight is not None:
        out_proj_weight = out_proj_weight.to(device)
    if out_proj_bias is not None:
        out_proj_bias = out_proj_bias.to(device)

    head_dim = embed_dim // num_heads
    assert head_dim * num_heads == embed_dim, "embed_dim must be divisible by num_heads"
    scaling = float(head_dim) ** -0.5
    
    # Calculate key size for early key_padding_mask check
    # This is an estimate that will be updated later when k is fully processed
    estimated_src_len = key.size(0) if key is not None else 0
    
    # Process key_padding_mask early if needed
    if key_padding_mask is not None:
        # Make sure key_padding_mask is on the same device
        key_padding_mask = key_padding_mask.to(device)
        
        # Store original mask for later use
        original_key_padding_mask = key_padding_mask

    if attn_mask is not None:
        # Make sure attn_mask is on the same device
        attn_mask = attn_mask.to(device)
        
        if attn_mask.dim() == 2:
            attn_mask = attn_mask.unsqueeze(0)
            if list(attn_mask.size()) != [1, tgt_len, tgt_len]:
                raise RuntimeError("The size of the 2D attn_mask is not correct.")
        elif attn_mask.dim() == 3:
            if list(attn_mask.size()) != [bsz * num_heads, tgt_len, tgt_len]:
                raise RuntimeError("The size of the 3D attn_mask is not correct.")
        else:
            raise RuntimeError(
                "attn_mask's dimension {} is not supported".format(attn_mask.dim())
            )

    if not use_separate_proj_weight:
        if (query is key or torch.equal(query, key)) and (
            key is value or torch.equal(key, value)
        ):
            # self-attention
            q, k, v = F.linear(query, in_proj_weight, in_proj_bias).chunk(3, dim=-1)

        elif key is value or torch.equal(key, value):
            # encoder-decoder attention
            # This is inline in_proj function with in_proj_weight and in_proj_bias
            _b = in_proj_bias
            _start = 0
            _end = embed_dim
            _w = in_proj_weight[_start:_end, :]
            if _b is not None:
                _b = _b[_start:_end]
            q = F.linear(query, _w, _b)

            if key is None:
                assert value is None
                k = None
                v = None
            else:
                # This is inline in_proj function with in_proj_weight and in_proj_bias
                _b = in_proj_bias
                _start = embed_dim
                _end = None
                _w = in_proj_weight[_start:, :]
                if _b is not None:
                    _b = _b[_start:]
                k, v = F.linear(key, _w, _b).chunk(2, dim=-1)

        else:
            # This is inline in_proj function with in_proj_weight and in_proj_bias
            _b = in_proj_bias
            _start = 0
            _end = embed_dim
            _w = in_proj_weight[_start:_end, :]
            if _b is not None:
                _b = _b[_start:_end]
            q = F.linear(query, _w, _b)

            # This is inline in_proj function with in_proj_weight and in_proj_bias
            _b = in_proj_bias
            _start = embed_dim
            _end = embed_dim * 2
            _w = in_proj_weight[_start:_end, :]
            if _b is not None:
                _b = _b[_start:_end]
            k = F.linear(key, _w, _b)

            # This is inline in_proj function with in_proj_weight and in_proj_bias
            _b = in_proj_bias
            _start = embed_dim * 2
            _end = None
            _w = in_proj_weight[_start:, :]
            if _b is not None:
                _b = _b[_start:]
            v = F.linear(value, _w, _b)
    else:
        q_proj_weight_non_opt = torch.jit._unwrap_optional(q_proj_weight)
        k_proj_weight_non_opt = torch.jit._unwrap_optional(k_proj_weight)
        v_proj_weight_non_opt = torch.jit._unwrap_optional(v_proj_weight)
        
        # Move projection weights to query device
        q_proj_weight_non_opt = q_proj_weight_non_opt.to(device)
        k_proj_weight_non_opt = k_proj_weight_non_opt.to(device)
        v_proj_weight_non_opt = v_proj_weight_non_opt.to(device)
        
        q = F.linear(query, q_proj_weight_non_opt, in_proj_bias[:embed_dim] if in_proj_bias is not None else None)
        k = F.linear(key, k_proj_weight_non_opt, in_proj_bias[embed_dim:2*embed_dim] if in_proj_bias is not None else None)
        v = F.linear(value, v_proj_weight_non_opt, in_proj_bias[2*embed_dim:] if in_proj_bias is not None else None)

    q = q * scaling

    if attn_mask is not None:
        # Make sure attn_mask is on the same device
        attn_mask = attn_mask.to(device)
        
        if attn_mask.dim() == 2:
            attn_mask = attn_mask.unsqueeze(0)
            if list(attn_mask.size()) != [1, tgt_len, tgt_len]:
                raise RuntimeError("The size of the 2D attn_mask is not correct.")
        elif attn_mask.dim() == 3:
            if list(attn_mask.size()) != [bsz * num_heads, tgt_len, tgt_len]:
                raise RuntimeError("The size of the 3D attn_mask is not correct.")
        else:
            raise RuntimeError(
                "attn_mask's dimension {} is not supported".format(attn_mask.dim())
            )

    if key_padding_mask is not None:
        # Make sure key_padding_mask is on the same device
        key_padding_mask = key_padding_mask.to(device)
        
        # Check and fix key_padding_mask dimensions
        if key_padding_mask.size(0) != bsz or key_padding_mask.size(1) != estimated_src_len:
            print(f"Warning: key_padding_mask shape {key_padding_mask.shape} doesn't match required shape ({bsz}, {estimated_src_len})")
            # Create a new mask with the right shape
            new_mask = torch.zeros((bsz, estimated_src_len), dtype=torch.bool, device=device)
            # Copy as much as we can from the original mask
            copy_rows = min(key_padding_mask.size(0), bsz)
            copy_cols = min(key_padding_mask.size(1), estimated_src_len)
            new_mask[:copy_rows, :copy_cols] = key_padding_mask[:copy_rows, :copy_cols]
            key_padding_mask = new_mask

    # reshape q, k, v for multihead attention and make batch first
    q = q.contiguous().view(tgt_len, bsz * num_heads, head_dim).transpose(0, 1)
    if k is not None:
        k = k.contiguous().view(-1, bsz * num_heads, head_dim).transpose(0, 1)
    if v is not None:
        v = v.contiguous().view(-1, bsz * num_heads, head_dim).transpose(0, 1)

    if static_k is not None:
        assert static_k.size(0) == bsz * num_heads
        assert static_k.size(2) == head_dim
        k = static_k

    if static_v is not None:
        assert static_v.size(0) == bsz * num_heads
        assert static_v.size(2) == head_dim
        v = static_v

    # Now we have the correct src_len from k
    src_len = k.size(1)
    
    # Now update key_padding_mask if needed
    if key_padding_mask is not None:
        # Check and fix key_padding_mask dimensions with the correct src_len
        if key_padding_mask.size(0) != bsz or key_padding_mask.size(1) != src_len:
            print(f"Warning: key_padding_mask shape {key_padding_mask.shape} doesn't match required shape ({bsz}, {src_len})")
            # Create a new mask with the right shape
            new_mask = torch.zeros((bsz, src_len), dtype=torch.bool, device=device)
            # Copy as much as we can from the original mask
            copy_rows = min(original_key_padding_mask.size(0), bsz)
            copy_cols = min(original_key_padding_mask.size(1), src_len)
            if copy_rows > 0 and copy_cols > 0:
                new_mask[:copy_rows, :copy_cols] = original_key_padding_mask[:copy_rows, :copy_cols]
            key_padding_mask = new_mask

    if add_zero_attn:
        src_len += 1
        k = torch.cat(
            [k, torch.zeros((k.size(0), 1) + k.size()
                          [2:], dtype=k.dtype, device=k.device)],
            dim=1,
        )
        v = torch.cat(
            [v, torch.zeros((v.size(0), 1) + v.size()
                          [2:], dtype=v.dtype, device=v.device)],
            dim=1,
        )
        if attn_mask is not None:
            attn_mask = pad(attn_mask, (0, 1))
        if key_padding_mask is not None:
            key_padding_mask = pad(key_padding_mask, (0, 1))

    attn_output_weights = torch.bmm(q, k.transpose(1, 2))
    assert list(attn_output_weights.size()) == [bsz * num_heads, tgt_len, src_len]

    if attn_mask is not None:
        if attn_mask.dtype == torch.bool:
            attn_output_weights.masked_fill_(attn_mask, float("-inf"))
        else:
            attn_output_weights += attn_mask

    if key_padding_mask is not None:
        attn_output_weights = attn_output_weights.view(
            bsz, num_heads, tgt_len, src_len)
        
        # Ensure key_padding_mask has correct dimensions before using it
        if key_padding_mask.size(0) != bsz or key_padding_mask.size(1) != src_len:
            # Recreate the mask with correct dimensions
            new_mask = torch.zeros((bsz, src_len), dtype=torch.bool, device=device)
            # Copy what we can
            copy_rows = min(key_padding_mask.size(0), bsz)
            copy_cols = min(key_padding_mask.size(1), src_len)
            new_mask[:copy_rows, :copy_cols] = key_padding_mask[:copy_rows, :copy_cols]
            key_padding_mask = new_mask
            
        # Ensure the expanded mask matches the dimensions of attn_output_weights
        # The issue is with the broadcasting of the mask to the attention weights
        try:
            expanded_mask = key_padding_mask.unsqueeze(1).unsqueeze(2)
            # Check if dimensions match for masked_fill operation
            if expanded_mask.size(0) != attn_output_weights.size(0) or \
               expanded_mask.size(3) != attn_output_weights.size(3):
                print(f"Warning: expanded_mask shape {expanded_mask.shape} doesn't match attn_output_weights shape {attn_output_weights.shape}")
                
                # Create a new mask with the right shape
                new_expanded_mask = torch.zeros(
                    (attn_output_weights.size(0), 1, 1, attn_output_weights.size(3)), 
                    dtype=torch.bool, 
                    device=device
                )
                
                # Copy what we can from the original mask
                copy_rows = min(expanded_mask.size(0), attn_output_weights.size(0))
                copy_cols = min(expanded_mask.size(3), attn_output_weights.size(3))
                
                if copy_rows > 0 and copy_cols > 0:
                    new_expanded_mask[:copy_rows, :, :, :copy_cols] = expanded_mask[:copy_rows, :, :, :copy_cols]
                
                expanded_mask = new_expanded_mask
            
            # Apply the mask
            attn_output_weights = attn_output_weights.masked_fill(
                expanded_mask,
                float("-inf"),
            )
        except Exception as e:
            print(f"Error applying mask in attention: {e}")
            # If masking fails, continue without masking
            pass
            
        attn_output_weights = attn_output_weights.view(
            bsz * num_heads, tgt_len, src_len)

    attn_output_weights = F.softmax(attn_output_weights, dim=-1)
    attn_output_weights = F.dropout(
        attn_output_weights, p=dropout_p, training=training)

    # ARM module
    if arm is not None:
        h = int(src_len ** 0.5)
        if h * h != src_len:
            h = 1  # fall back to 1d
        attn_output_weights = arm(
            attn_output_weights, key_padding_mask, h, attn_output_weights
        )

    attn_output = torch.bmm(attn_output_weights, v)
    assert list(attn_output.size()) == [bsz * num_heads, tgt_len, head_dim]
    attn_output = (
        attn_output.transpose(0, 1).contiguous().view(tgt_len, bsz, embed_dim)
    )
    attn_output = F.linear(attn_output, out_proj_weight, out_proj_bias)

    if need_weights:
        # average attention weights over heads
        attn_output_weights = attn_output_weights.view(
            bsz, num_heads, tgt_len, src_len)
        return attn_output, attn_output_weights.sum(dim=1) / num_heads
    else:
        return attn_output, None
